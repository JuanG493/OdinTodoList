(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>a});var r=e(537),o=e.n(r),i=e(645),c=e.n(i)()(o());c.push([n.id,"\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    font-family:monospace\n}\n\n.comands {\n    grid-column: 1 / -1;\n    /* grid-row: 1 /  ; */\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #042940;\n}\n.sidebar {\n    color: #042940;\n    height: 100vh;\n    grid-column: 1 / 2;\n}\n\n.dtToday{\n    font-size: xx-large;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n.dtUpcoming{\n    font-size: xx-large;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n.projects{\n    font-size: xx-large;\n}\n.projectNew{\n    font-size: large;\n}\n\n.mainframe {\n    grid-column: 2 / 3;\n}\n\n.displayproyects  {\n    border: thick double #005C53;\n    padding: 1%;\n    display: flex;\n    flex-direction: column;\n}\n\n.mainBtns {\n    position: sticky;\n    top: 85%;\n    left: 100%;\n    font-size: x-large;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n}\n\nbutton{\n    background-color: #9FC131;\n    color: black;\n    border-color: rgb(255, 255, 255);\n    padding: 1% 3%;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 14px;\n}\n\n.btnNew {\n\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n    justify-self: center;\n}\n\n.btnCheckL,\n.btnNote {\n    display: none;\n}\n\n\n\n.btnCheckL.show {\n    display: flex;\n    align-self: center;\n    justify-content: center;\n    grid-row: 2 / 3;\n    align-items: center;\n}\n\n.btnNote.show {\n    display: flex;\n    align-self: center;\n    justify-content: center;\n    grid-column: 2 / 3;\n}\n\n.inputs {\n    color: blanchedalmond;\n    display: none;\n    position: fixed;\n    top: 20%;\n    bottom: 10%;\n    left: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, 0.815);\n    justify-content: center;\n    align-items: center;\n}\n\n.inputs.show {\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.listOfCheckList{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n}\n\n#pluschek {\n    justify-self: center;\n    align-self: flex-end;\n    margin-bottom: 16px;\n}\n\n\n.listOfCheckL{\n    display: none;\n}\n\n.listOfCheckL.show{\n    display:block;\n}\n\n.btnpls.show{\n    justify-self: center;\n    align-self: flex-end;\n    display: block;\n    margin-bottom: 16px;\n}\n\n#noteElm{\n    width: 25%;\n    height: 5rem;\n}\n\n.chekeado + label{\n    text-decoration: line-through;\n}\n\na{\n    color:#042940;\n    text-decoration: underline;\n}\na:hover{\n    color: #DBF227;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:";AACA;IACI,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B;AACJ;;AAEA;IACI,mBAAmB;IACnB,qBAAqB;IACrB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,cAAc;AAClB;AACA;IACI,cAAc;IACd,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;AACA;IACI,mBAAmB;AACvB;AACA;IACI,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,4BAA4B;IAC5B,WAAW;IACX,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,QAAQ;IACR,UAAU;IACV,kBAAkB;IAClB,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;AAC/B;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,gCAAgC;IAChC,cAAc;IACd,kBAAkB;IAClB,qBAAqB;IACrB,qBAAqB;IACrB,eAAe;AACnB;;AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,eAAe;IACf,oBAAoB;AACxB;;AAEA;;IAEI,aAAa;AACjB;;;;AAIA;IACI,aAAa;IACb,kBAAkB;IAClB,uBAAuB;IACvB,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,aAAa;IACb,eAAe;IACf,QAAQ;IACR,WAAW;IACX,OAAO;IACP,QAAQ;IACR,sCAAsC;IACtC,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;;IAEI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;;AAEvB;;AAEA;IACI,oBAAoB;IACpB,oBAAoB;IACpB,mBAAmB;AACvB;;;AAGA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,oBAAoB;IACpB,oBAAoB;IACpB,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,0BAA0B;AAC9B;AACA;IACI,cAAc;AAClB",sourcesContent:["\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    font-family:monospace\n}\n\n.comands {\n    grid-column: 1 / -1;\n    /* grid-row: 1 /  ; */\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #042940;\n}\n.sidebar {\n    color: #042940;\n    height: 100vh;\n    grid-column: 1 / 2;\n}\n\n.dtToday{\n    font-size: xx-large;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n.dtUpcoming{\n    font-size: xx-large;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n.projects{\n    font-size: xx-large;\n}\n.projectNew{\n    font-size: large;\n}\n\n.mainframe {\n    grid-column: 2 / 3;\n}\n\n.displayproyects  {\n    border: thick double #005C53;\n    padding: 1%;\n    display: flex;\n    flex-direction: column;\n}\n\n.mainBtns {\n    position: sticky;\n    top: 85%;\n    left: 100%;\n    font-size: x-large;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n}\n\nbutton{\n    background-color: #9FC131;\n    color: black;\n    border-color: rgb(255, 255, 255);\n    padding: 1% 3%;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 14px;\n}\n\n.btnNew {\n\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n    justify-self: center;\n}\n\n.btnCheckL,\n.btnNote {\n    display: none;\n}\n\n\n\n.btnCheckL.show {\n    display: flex;\n    align-self: center;\n    justify-content: center;\n    grid-row: 2 / 3;\n    align-items: center;\n}\n\n.btnNote.show {\n    display: flex;\n    align-self: center;\n    justify-content: center;\n    grid-column: 2 / 3;\n}\n\n.inputs {\n    color: blanchedalmond;\n    display: none;\n    position: fixed;\n    top: 20%;\n    bottom: 10%;\n    left: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, 0.815);\n    justify-content: center;\n    align-items: center;\n}\n\n.inputs.show {\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.listOfCheckList{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n}\n\n#pluschek {\n    justify-self: center;\n    align-self: flex-end;\n    margin-bottom: 16px;\n}\n\n\n.listOfCheckL{\n    display: none;\n}\n\n.listOfCheckL.show{\n    display:block;\n}\n\n.btnpls.show{\n    justify-self: center;\n    align-self: flex-end;\n    display: block;\n    margin-bottom: 16px;\n}\n\n#noteElm{\n    width: 25%;\n    height: 5rem;\n}\n\n.chekeado + label{\n    text-decoration: line-through;\n}\n\na{\n    color:#042940;\n    text-decoration: underline;\n}\na:hover{\n    color: #DBF227;\n}\n"],sourceRoot:""}]);const a=c},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var c={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(c[l]=!0)}for(var s=0;s<n.length;s++){var u=[].concat(n[s]);r&&c[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},c=[],a=0;a<n.length;a++){var l=n[a],s=r.base?l[0]+r.base:l[0],u=i[s]||0,A="".concat(s," ").concat(u);i[s]=u+1;var f=e(A),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(d);else{var p=o(d,r);r.byIndex=a,t.splice(a,0,{identifier:A,updater:p,references:1})}c.push(A)}return c}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var c=0;c<i.length;c++){var a=e(i[c]);t[a].references--}for(var l=r(n,o),s=0;s<i.length;s++){var u=e(i[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0;var r={};(()=>{e.d(r,{c8:()=>Y,r$:()=>W,Ld:()=>$,zJ:()=>U,Mm:()=>R,Aj:()=>rn,uv:()=>en,nZ:()=>on,UK:()=>cn});var n=e(379),t=e.n(n),o=e(795),i=e.n(o),c=e(569),a=e.n(c),l=e(565),s=e.n(l),u=e(216),A=e.n(u),f=e(589),d=e.n(f),p=e(426),m={};function y(n){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},y(n)}function b(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function v(n){b(1,arguments);var t=function(n){b(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"===y(n)&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(n);return t.setHours(0,0,0,0),t}function h(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}m.styleTagTransform=d(),m.setAttributes=s(),m.insert=a().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=A(),t()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;var g=document.querySelector(".formElm"),B=document.querySelector(".dtToday"),C=document.querySelector(".dtUpcoming");function I(n){!function(n){return b(1,arguments),function(n,t){b(2,arguments);var e=v(n),r=v(t);return e.getTime()===r.getTime()}(n,Date.now())}(new Date("".concat(n.date)))?(n.tempo="dtUpcoming",x(n,C)):(n.tempo="dtToday",x(n,B))}function x(n,t){var e=document.createElement("button");e.textContent=n.title,e.setAttribute("id","pj_".concat(n.id)),e.addEventListener("click",(function(){j(n,!0)})),t.appendChild(e)}function j(n,t){t&&en(g);var e=Object.hasOwn(n,"note");g.innerHTML+='<div class="'.concat(n.title).concat(n.id,' displayproyects"</div>');var r,o,i=document.querySelector(".".concat(n.title).concat(n.id));if(i.innerHTML+=" \n          <div>\n              <div><h3>Project:</h3>".concat(n.project,"</div>\n              <div><h3>Title:</h3> ").concat(n.title,"</div>\n              <div><h3>Date:</h3> ").concat(n.date,"</div>\n         </div>"),e)i.innerHTML+="<div><h3>Nota:</h3> ".concat(n.note,"</div>");else{i.innerHTML+=" <h3>List</h3>\n                                        <ul>";for(var c=0,a=Object.entries(n.listOfElm);c<a.length;c++){var l=(r=a[c],o=2,function(n){if(Array.isArray(n))return n}(r)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,o,i,c,a=[],l=!0,s=!1;try{if(i=(e=e.call(n)).next,0===t){if(Object(e)!==e)return;l=!1}else for(;!(l=(r=i.call(e)).done)&&(a.push(r.value),a.length!==t);l=!0);}catch(n){s=!0,o=n}finally{try{if(!l&&null!=e.return&&(c=e.return(),Object(c)!==c))return}finally{if(s)throw o}}return a}}(r,o)||function(n,t){if(n){if("string"==typeof n)return h(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?h(n,t):void 0}}(r,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];i.innerHTML+='\n              <li>\n                  <input type="checkbox" class="checkBoxing" id="'.concat(s,'"/>\n                  <label for="').concat(s,'">').concat(s,": ").concat(u,"</label>\n              </li>")}}i.innerHTML+='\n            </ul>\n            <div class="mainBtns">\n              <button id="delToDo">Delete</button>\n              <button id="modifyToDo">modify</button>\n            </div>';var A=document.querySelector("#delToDo"),f=document.querySelector("#modifyToDo"),d=document.querySelectorAll(".checkBoxing");A.addEventListener("click",(function(t){t.preventDefault(),en(g),w(n)})),f.addEventListener("click",(function(){en(g),rn(n.title,n.date),e?R(n.note):U(n.listOfElm),w(n)})),d.forEach((function(n){n.addEventListener("click",(function(){n.classList.toggle("chekeado")}))}))}function w(n){var t,e,r=document.querySelector(".".concat(n.tempo)),o=document.querySelector("#pj_".concat(n.id));r.removeChild(o),t=n.title,delete W[t],e=t,console.log("key",e),localStorage.removeItem(e)}function k(n){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},k(n)}function E(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),t&&S(n,t)}function S(n,t){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,t){return n.__proto__=t,n},S(n,t)}function O(n){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var e,r=L(n);if(t){var o=L(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return function(n,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}(this,e)}}function L(n){return L=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(n){return n.__proto__||Object.getPrototypeOf(n)},L(n)}function T(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,(void 0,o=function(n,t){if("object"!==k(n)||null===n)return n;var e=n[Symbol.toPrimitive];if(void 0!==e){var r=e.call(n,"string");if("object"!==k(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(r.key),"symbol"===k(o)?o:String(o)),r)}var o}function N(n,t,e){return t&&T(n.prototype,t),e&&T(n,e),Object.defineProperty(n,"prototype",{writable:!1}),n}function D(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}var M=N((function n(t,e,r){D(this,n),this.title=t,this.date=e,this.project=r})),P=function(n){E(e,n);var t=O(e);function e(n,r,o,i){var c;return D(this,e),(c=t.call(this,n,r,o)).listOfElm=i,c}return N(e)}(M),q=function(n){E(e,n);var t=O(e);function e(n,r,o,i){var c;return D(this,e),(c=t.call(this,n,r,o)).note=i,c}return N(e)}(M);function z(n,t){if(n){if("string"==typeof n)return H(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?H(n,t):void 0}}function H(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function U(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";$.innerHTML+='\n  <div class="displayCheckL">\n    <h3>list</h3>\n    <div id=\'pjDisplay\'></div>\n    <ul class="listOfCheckList"></ul>\n    <button class="btnpls">+</button>\n    <input type="submit" id="submit" />\n    <button class="close">X</button>\n</div>';var t,e,r=on(".btnpls"),o=on(".listOfCheckList"),i=on("#submit"),c=on(".close");if(X(),n)for(var a=0,l=Object.entries(n);a<l.length;a++){var s=(t=l[a],e=2,function(n){if(Array.isArray(n))return n}(t)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,o,i,c,a=[],l=!0,s=!1;try{if(i=(e=e.call(n)).next,0===t){if(Object(e)!==e)return;l=!1}else for(;!(l=(r=i.call(e)).done)&&(a.push(r.value),a.length!==t);l=!0);}catch(n){s=!0,o=n}finally{try{if(!l&&null!=e.return&&(c=e.return(),Object(c)!==c))return}finally{if(s)throw o}}return a}}(t,e)||z(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],A=s[1];o.innerHTML+='\n      <input type="text" id="'.concat(u,'" class="chi inp" value="').concat(A,'">')}r.addEventListener("click",(function(n){n.preventDefault();var t,e,r,i=cn(".chi").length+1||1;t=o,e=i,(r=J("li")).appendChild(J("input","text","chi".concat(e),"chi inp")),t.appendChild(r)})),i.addEventListener("click",(function(n){n.preventDefault(),_("check",F(cn(".chi"))),en($)})),c.addEventListener("click",(function(){en($)}))}function R(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";$.innerHTML+='\n    <div class="displayCheckL">\n      <h3>Note</h3>\n      <div id=\'pjDisplay\'></div>\n      <label for=\'noteElm\'></div>\n      <input type="text" size="20" id="noteElm" value="'.concat(n,'"></input>\n      <input type="submit" id="submit" />\n      <button class="close">X</button>\n    </div>');var t=on("#submit"),e=on(".close");X(),t.addEventListener("click",(function(n){n.preventDefault(),_("note",on("#noteElm").value),en($)})),e.addEventListener("click",(function(){en($)}))}function _(n,t){var e,r,o,i,c=F(cn(".bsInfo")),a=String(c.title)||"nn";e="note"===n?new q(a,String(c.date),Z(),t):new P(a,String(c.date),Z(),t),W[a]=function(n){var t={};for(var e in n)t[e]=n[e];return t}(e),r=a,o=Object.keys(W).indexOf(r),W[r].id=o,I(W[a]),i=W[a],localStorage.setItem(i.title,JSON.stringify(i))}function Z(){return on("#pjDisplay").children[1].value}function X(){var n,t=on("#pjDisplay"),e="",r=function(n,t){var e="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!e){if(Array.isArray(n)||(e=z(n))){e&&(n=e);var r=0,o=function(){};return{s:o,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,c=!0,a=!1;return{s:function(){e=e.call(n)},n:function(){var n=e.next();return c=n.done,n},e:function(n){a=!0,i=n},f:function(){try{c||null==e.return||e.return()}finally{if(a)throw i}}}}(Y);try{for(r.s();!(n=r.n()).done;){var o=n.value;e+='<option value="'.concat(o,'" >').concat(o,"</option>")}}catch(n){r.e(n)}finally{r.f()}t.innerHTML='\n  <label for="pj-select">Choose a project:</label>\n  <select name="projectSelect" id="pj-select">\n  '.concat(e,"\n  </select>")}function F(n){var t,e={};return(t=n,function(n){if(Array.isArray(n))return H(n)}(t)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(t)||z(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(n){return e["".concat(n.id)]=[n.value]})),e}function J(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",o=document.createElement("".concat(n));return t&&o.setAttribute("type","".concat(t)),e&&o.setAttribute("id","".concat(e)),r&&o.setAttribute("class","".concat(r)),o}function Q(n){var t=on(".displayProjects");t.innerHTML+="\n    <div>\n      <a class='projectNew ".concat(n,"'>").concat(n,'</a>\n      <button class="delProject" value="').concat(n,'">X</button>\n    </div>');var e=cn(".delProject"),r=cn(".projectNew");e.forEach((function(n){n.addEventListener("click",(function(){t.removeChild(n.parentNode);var e=Y.indexOf(n.value);Y.splice(e,1),en($)}))})),r.forEach((function(n){n.addEventListener("click",(function(){!function(n){if(en($),Object.getOwnPropertyNames(W).length>=1)for(var t in W)W[t].project===n&&j(W[t],!1)}(n.innerText)}))}))}var W={},Y=["Odin"],$=on(".formElm"),G=on(".btnNew"),V=on(".btnCheckL"),K=on(".btnNote"),nn=on(".btnNewProject");function tn(n){for(var t in n)n[t].classList.toggle("show")}function en(n){n.innerHTML=" "}function rn(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=(new Date).toLocaleDateString().split("/");$.innerHTML+='\n    <label for="title">Title</label>\n    <input type="text" id="title" class="bsInfo inp" value="'.concat(n,'" required ></input>\n    <label for="date">date</label>\n    <input type="date" id="date" class="bsInfo inp" \n      min="').concat(e[2],"-").concat(e[0].padStart(2,"0"),"-").concat(e[1],'" \n      value="').concat(t,'"></input>')}function on(n){return document.querySelector(n)}function cn(n){return document.querySelectorAll(n)}localStorage.length>=1?function(){for(var n=[],t=1;t<=localStorage.length;t++){var e=localStorage.key(t-1),r=JSON.parse(localStorage.getItem(e));W[e]=r,n.includes(r.project)||(n.push(r.project),Q(r.project)),I(r)}}():Q("Odin"),G.addEventListener("click",(function(){en($),tn([V,K])})),V.addEventListener("click",(function(){en($),rn(),U(),tn([K,V])})),K.addEventListener("click",(function(){en($),rn(),R(),tn([K,V])})),nn.addEventListener("click",(function(){en($),function(){$.innerHTML+='\n  <div class="groupProjects">\n    <h3>Project</h3>\n    <label for=\'projectName\'></div>\n    <input type="text" id="projectName"></input>\n    <input type="submit" id="submit" />\n    <button class="close">X</button>\n  </div>';var n=on("#submit");on(".close").addEventListener("click",(function(){en($)})),n.addEventListener("click",(function(n){n.preventDefault();var t=on("#projectName").value;Y.push(t),Q(t),en($)}))}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,